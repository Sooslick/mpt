<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>main = global.GR //client connection data
active = false
wait = true
status = 0
ReadyCount = 1
GameReady = false
pid = -1
discid = 0

buffer_send = buffer_create(64, buffer_grow, 1);
buffer_seek (buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s16, 11)
buffer_write(buffer_send, buffer_s16, 1000)
network_send_packet( main, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//board socket
if pid&lt;&gt;-1
  {
  buffer_seek (buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 30)
  buffer_write(buffer_send, buffer_s16, pid)
  buffer_write(buffer_send, buffer_s16, parent.p[pid].dx)
  network_send_packet( main, buffer_send, buffer_tell(buffer_send) );
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!active)&amp;&amp;(!wait)
  {
  buffer_seek (buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 11)
  network_send_packet( main, buffer_send, buffer_tell(buffer_send) );
  GameReady = true
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");

if type == network_type_data
  {
  msg_buff = ds_map_find_value(async_load, "buffer");
  SType = buffer_read(msg_buff, buffer_s16);
  switch(SType)
    {
    case 8:
      network_destroy(global.GR)
      global.ErrID = 5
      action_another_room(StartRoom) 
      break;  
    case 12:
      pid = buffer_read(msg_buff, buffer_s16);    //пакет со смещением игрока НУЖЕН ID
      instance_destroy(parent.p[pid],false)
      j = degtorad(parent.offset[pid])
      parent.p[pid] = instance_create(300+210*sin(j),300+210*cos(j),oBoard) //other Player
      parent.p[pid].parent = parent
      parent.p[pid].no = pid           
      parent.p[pid].rot = parent.offset[pid]
      parent.p[pid].dx = 0
      wait = false
      break;
    case 14:
      active = true
      timer = instance_create(300,400,oPreTimer)
      timer.parent = parent
      parent.active = true
      break;
    case 20:
      parent.spd = buffer_read(msg_buff, buffer_f32);
      parent.spdtmp = buffer_read(msg_buff, buffer_f32);
      parent.clockwise = buffer_read(msg_buff, buffer_s8);
      parent.rottick = buffer_read(msg_buff, buffer_s16) + 11; //пинг хуинг
      break;
    case 21:
        i = buffer_read(msg_buff, buffer_s16);
        if i&lt;&gt;pid
          parent.p[i].dx = buffer_read(msg_buff, buffer_s16); 
      break;
    case 22:
      ReadyCount = buffer_read(msg_buff, buffer_s8)     //лобби-пакет
      break;
    case 23:
      i = buffer_read(msg_buff, buffer_s16)
      parent.scTable[i] = buffer_read(msg_buff, buffer_s16)
      break
    case 24:
      if parent.bb&lt;&gt;0
        {
        parent.bb.delay = buffer_read(msg_buff, buffer_s16)
        parent.bb.rparam = buffer_read(msg_buff, buffer_s16) + parent.offset[pid]
        parent.bb.vspeed = buffer_read(msg_buff, buffer_f32)
        parent.bb.hspeed = buffer_read(msg_buff, buffer_f32)
        parent.bb.x = buffer_read(msg_buff, buffer_s16)
        parent.bb.y = buffer_read(msg_buff, buffer_s16)
        }
      break;
    case 25:
      if parent.bb&lt;&gt;0  
        {
        parent.bb.x = buffer_read(msg_buff, buffer_s16) 
        parent.bb.y = buffer_read(msg_buff, buffer_s16)
        parent.bb.direction = buffer_read(msg_buff, buffer_s16)
        }
      break;
    case 26:
      parent.ElimCount = buffer_read(msg_buff, buffer_s16) 
      parent.CETGoalID = buffer_read(msg_buff, buffer_s16)
      parent.ClientElimTriggered = true
      break
    case 27:
      eid = buffer_read(msg_buff, buffer_s16) 
      //global.ErrID = 11
      if discid==0
        discid = instance_create(0,0,DiscMsg)
      else
        discid.op = 1
      discid.content = global.PlsArrNick[eid] + ' left'
      global.PlsArrNick[eid] = '&lt; BOT &gt;' 
      parent.gt[eid].NameTag = '&lt; BOT &gt;' 
      break
    case 28:
      if parent.tt&lt;&gt;0 
        parent.tt.tick = buffer_read(msg_buff, buffer_s16) 
      break
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !active
  {
  draw_set_halign(fa_center)
  draw_set_color(c_maroon)
  draw_set_font(ChatFont)
  draw_set_alpha(1)
  if wait
    {
      for (i=0; i&lt;= 5; i++)
        draw_sprite_ext(loading,0,300,300,1,1,5*parent.loadrot+60*i,c_white,1)
      draw_text(300,350,'Waiting for players')
      draw_text(300,400,string(ReadyCount) + ' / ' + string(global.PlsCount) + ' ready')
    }
  else
    {
      draw_text(300,350,'Waiting for players')
      if !GameReady
        draw_text(300,400,'Press mouse to get ready')
      else
        draw_text(300,400,string(ReadyCount) + ' / ' + string(global.PlsCount) + ' ready')
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
