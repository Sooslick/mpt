<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MessageText = ''
MessageSend = false
ClientText = ''
ClientSend = false

NeedBroadcast = false
nbt = 60
eid = 0
SENDID = 0

server = network_create_server(network_socket_tcp, real(global.port), global.maxpl);
buffer_send = buffer_create(64, buffer_grow, 1);

delay = 0
for (i=0; i&lt;=global.maxpl; i++)
  {
  PlsValid[i] = false
  PlsArrSock[i] = 0
  PlsArrIP[i] = ''
  }
  
instance_create(400,530,ButtonStart)

GameRulerLobby.BbClArr[0] = global.bbcl

bk = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*delay++
if delay == 60
  delay = 0
*/
if NeedBroadcast
  {
  nbt--
  if nbt==0
    {
    for (i=0; i&lt;GameRulerLobby.PlsCount; i++ )
      {
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 3)
      buffer_write(buffer_send, buffer_u8, GameRulerLobby.PlsCount)
      buffer_write(buffer_send, buffer_u8, i)
      buffer_write(buffer_send, buffer_string, GameRulerLobby.PlsArrNick[i])
      for (j=1; j&lt;GameRulerLobby.PlsCount; j++)
        network_send_packet( PlsArrSock[j], buffer_send, buffer_tell(buffer_send) ); 
      }
    for (i=0; i&lt;GameRulerLobby.PlsCount; i++ )
      {   
      buffer_seek (buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 40)
      buffer_write(buffer_send, buffer_s16, i)
      buffer_write(buffer_send, buffer_s32, GameRulerLobby.BbClArr[i])
      for (j=1; j&lt;GameRulerLobby.PlsCount; j++)
        network_send_packet( PlsArrSock[j], buffer_send, buffer_tell(buffer_send) );
      }
    nbt = 60
    NeedBroadcast = false    
    }
  }
  
if keyboard_check(vk_backspace)
  {
  bk++
  if (bk&gt;50)&amp;&amp;(bk mod 3 == 0)
    MessageText = string_copy(MessageText,1,string_length(MessageText)-1)
  }
else
  bk = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");

if type = network_type_connect
  {                   
  PlsArrSock[GameRulerLobby.PlsCount] = sock;
  PlsArrIP[GameRulerLobby.PlsCount] = ip; 
  PlsValid[GameRulerLobby.PlsCount] = false;
  PlsArrNick[GameRulerLobby.PlsCount] = '&lt; connecting &gt;'
  }
else if type = network_type_data
  {   
  
  for (i=0; i&lt;global.maxpl; i++)
  if eid == PlsArrSock[i]
    {
    SENDID = i
    break
    }
                     
  msg_buff = ds_map_find_value(async_load, "buffer");
  SType = buffer_read(msg_buff, buffer_s16); 
  switch(SType)
    {
    case 0: 
      if GameRulerLobby.PlsCount == global.maxpl
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 1)
        buffer_write(buffer_send, buffer_s16, 10000 + global.vtcp)
        buffer_write(buffer_send, buffer_u8, global.maxpl)
        buffer_write(buffer_send, buffer_u8, GameRulerLobby.PlsCount)
        buffer_write(buffer_send, buffer_u8, global.diff)
        network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
        }
      else
        {  
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 1)
        buffer_write(buffer_send, buffer_s16, global.vtcp)
        buffer_write(buffer_send, buffer_u8, global.maxpl)
        buffer_write(buffer_send, buffer_u8, GameRulerLobby.PlsCount)
        buffer_write(buffer_send, buffer_u8, global.diff)
        network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
        }
      break;
    case 2:
      GameRulerLobby.PlsArrNick[SENDID] =  buffer_read(msg_buff, buffer_string);
      PlsValid[SENDID] = true;
      GameRulerLobby.PlsCount++
      for (i=0; i&lt;global.maxpl; i++)
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 3)
        buffer_write(buffer_send, buffer_u8, GameRulerLobby.PlsCount)
        buffer_write(buffer_send, buffer_u8, i)
        buffer_write(buffer_send, buffer_string, GameRulerLobby.PlsArrNick[i])
        network_send_packet( eid, buffer_send, buffer_tell(buffer_send) ); 
        }
      for (i=0; i&lt;global.maxpl; i++)
        {
        buffer_seek (buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 40)
        buffer_write(buffer_send, buffer_s16, i)
        buffer_write(buffer_send, buffer_s32, GameRulerLobby.BbClArr[i])
            network_send_packet( eid, buffer_send, buffer_tell(buffer_send) ) 
        }
      ClientText = GameRulerLobby.PlsArrNick[SENDID] + ' connected'
      ClientSend = true
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 5)
      buffer_write(buffer_send, buffer_string, ClientText)
      for (i=1; i&lt;global.maxpl; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );  
      NeedBroadcast = true
      
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 9)
      buffer_write(buffer_send, buffer_u8, GameRulerLobby.PlsCount)
      buffer_write(buffer_send, buffer_u8, global.frag)
      buffer_write(buffer_send, buffer_u8, global.timer)
      buffer_write(buffer_send, buffer_u8, global.lv)
      buffer_write(buffer_send, buffer_u8, global.gmode)
      for (i=1; i&lt;global.maxpl; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      break;
    case 4:
      ClientText = buffer_read (msg_buff, buffer_string)
      ClientSend = true
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 5)
      buffer_write(buffer_send, buffer_string, ClientText)
      for (i=1; i&lt;global.maxpl; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      break;
    case 6:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 7)
      buffer_write(buffer_send, buffer_s16, global.vtcp)
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break;
    case 41:
      GameRulerLobby.BbClArr[SENDID] = buffer_read(msg_buff, buffer_s32); 
      break;
    }  
  }
else if type == network_type_disconnect
  {
  
  for (i=0; i&lt;=global.maxpl; i++)
  if sock == PlsArrSock[i]
    {
    SENDID = i
    break
    }
  
  if PlsValid[SENDID]
    {
    GameRulerLobby.PlsCount--
    ClientText = GameRulerLobby.PlsArrNick[SENDID] + ' disconnected'
    ClientSend = true
    GameRulerLobby.PlsArrNick[SENDID] = '&lt; wait &gt;'
    for (i=SENDID+1; i&lt;global.maxpl; i++)
        {
        GameRulerLobby.PlsArrNick[i-1] = GameRulerLobby.PlsArrNick[i]
        GameRulerLobby.PlsArrNick[i] = '&lt; wait &gt;'
        GameRulerLobby.BbClArr[i-1] = GameRulerLobby.BbClArr[i]
        GameRulerLobby.BbClArr[i] = 0
        PlsArrSock[i-1] = PlsArrSock[i]
        PlsArrSock[i] = 0
        PlsArrIP[i-1] = PlsArrIP[i]
        PlsArrIP[i] = 0
        PlsValid[i-1] = PlsValid[i]
        PlsValid[i] = false
        } 
    if SENDID+1==global.maxpl
        {
        PlsArrSock[SENDID] = 0
        PlsArrIP[SENDID] = 0
        PlsValid[SENDID] = false
        }
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 5)
    buffer_write(buffer_send, buffer_string, ClientText)
    for (i=1; i&lt;global.maxpl; i++)
      network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    for (i=1; i&lt;global.maxpl; i++)
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 3)
        buffer_write(buffer_send, buffer_u8, GameRulerLobby.PlsCount)
        buffer_write(buffer_send, buffer_u8, i)
        buffer_write(buffer_send, buffer_string, GameRulerLobby.PlsArrNick[i])
        for (j=1; j&lt;GameRulerLobby.PlsCount; j++)
          network_send_packet( PlsArrSock[j], buffer_send, buffer_tell(buffer_send) ); 
        }
    for (i=1; i&lt;GameRulerLobby.PlsCount; i++)
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 40)
        buffer_write(buffer_send, buffer_s16, i)
        buffer_write(buffer_send, buffer_s32, GameRulerLobby.BbClArr[i])
        for (j=1; j&lt;GameRulerLobby.PlsCount; j++)
          network_send_packet( PlsArrSock[j], buffer_send, buffer_tell(buffer_send) ); 
        }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ChatFont)
draw_set_alpha(0.50)
draw_set_color(0)
draw_rectangle(450,410,780,425,false)

draw_set_color(c_white)
draw_set_halign(fa_left)
draw_set_alpha(1)
if string_length(MessageText)&lt;=32
  draw_text(454,410,MessageText)
else
    {
    tw = 320 / string_width(MessageText)
    draw_text_transformed(454,410,MessageText,tw,1,0)
    }

//debug info
/*s = ''
for (i=0; i&lt;global.maxpl; i++)
  s+= string(PlsValid[i]) + ' ' +string(PlsArrSock[i]) + ' ' + '#'
s+= '#' + string(SENDID)
draw_text(5,5,s)*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if string_length(MessageText) &gt; 0
  {
  MessageText = global.Nick + ': ' + MessageText
  MessageSend = true
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 5)
  buffer_write(buffer_send, buffer_string, MessageText)
  for (i=1; i&lt;global.maxpl; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check(vk_enter)
  {     
  if keyboard_check(vk_backspace)
      MessageText = string_copy(MessageText,1,string_length(MessageText)-1)
  else
    if (ord(keyboard_lastchar)&gt;=32)
      if string_length(MessageText)&lt;48
        if keyboard_lastchar=='#'
          MessageText+= '\#'
        else
          MessageText+= keyboard_lastchar
  keyboard_lastchar = ''
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
