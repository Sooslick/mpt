<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
xdist=0
delay = irandom_range(30,100)
rparam = irandom_range(0,359)
bcs = 0

//kostyl
rot = oBoard.rot

cl = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if delay &gt; 0
  {
  delay--
  if delay == 0
    {
    vspeed = parent.bsp * sin(degtorad(-rparam+180))   
    hspeed = parent.bsp * cos(degtorad(-rparam+180))
    }
  else
    if delay &gt; 7
      rparam+= 15
  }
  
//bcs zalipanie

//color
dcg = 255 - (speed-parent.bsp)*40
if dcg&lt;0
  dcg = 0
dcb = 255 - (speed-parent.bsp)*200
if dcb&lt;0
  dcb = 0
cl = make_color_rgb(255,dcg,dcb)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="GoalTrigger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=irandom_range(0,5); i&lt;=10; i++)
  {
  pfx = instance_create(x,y,ballfx)
  pfx.direction = direction+180+irandom_range(-20,20)
  pfx.cl = other.cl
  }

x = 300
y = 300
xdist=0
delay = irandom_range(30,100)
rparam = irandom_range(0,359)
vspeed = 0
hspeed = 0

parent.GR.EventRot = true
switch global.diff
  {
  case 0:
    parent.spdtmp = parent.spd - 1
    parent.spd=1
    break
  case 1:
    parent.spdtmp = parent.spd - 1.5
    parent.spd=1.5
    break
  case 2:
    parent.spdtmp = parent.spd - 2
    parent.spd=2
    break
  case 3:
    parent.spdtmp = parent.spd - 2.5
    parent.spd=2.5
    break
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Wall">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bcs++
if bcs &gt; 4
  if bcs mod 2 == 0
    direction++
  else
    direction--
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obotBoard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bcs zalipanie
  iiid = instance_place(x,y,obotBoard)
  xdist = angle_difference(point_direction(300,300,x,y),point_direction(300,300,iiid.x,iiid.y))*5
  direction = point_direction(xstart,ystart,300,300)-xdist+90+iiid.rot
  x=xprevious
  y=yprevious
  hspeed*= 1.005
  vspeed*= 1.005
  bcs = 0
//VovRek syndrome
  if global.EMenu==2
    {
    buffer_seek (parent.GR.buffer_send, buffer_seek_start, 0);
    buffer_write(parent.GR.buffer_send, buffer_s16, 25)
    buffer_write(parent.GR.buffer_send, buffer_s16, x)
    buffer_write(parent.GR.buffer_send, buffer_s16, y)
    buffer_write(parent.GR.buffer_send, buffer_s16, direction)
    for (j=1; j&lt;global.PlsCount; j++)
      network_send_packet( global.PlsArrSock[j], parent.GR.buffer_send, buffer_tell(parent.GR.buffer_send) ) 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="otherBoard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bcs zalipanie
  iiid = instance_place(x,y,otherBoard)
  xdist = angle_difference(point_direction(300,300,x,y),point_direction(300,300,iiid.x,iiid.y))*5
  direction = point_direction(xstart,ystart,300,300)-xdist+90+iiid.rot
  x=xprevious
  y=yprevious
  hspeed*= 1.005
  vspeed*= 1.005
  bcs = 0
//VovRek syndrome
  if global.EMenu==2
    {
    buffer_seek (parent.GR.buffer_send, buffer_seek_start, 0);
    buffer_write(parent.GR.buffer_send, buffer_s16, 25)
    buffer_write(parent.GR.buffer_send, buffer_s16, x)
    buffer_write(parent.GR.buffer_send, buffer_s16, y)
    buffer_write(parent.GR.buffer_send, buffer_s16, direction)
    for (j=1; j&lt;global.PlsCount; j++)
      network_send_packet( global.PlsArrSock[j], parent.GR.buffer_send, buffer_tell(parent.GR.buffer_send) ) 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBoard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bcs zalipanie
  xdist = angle_difference(point_direction(300,300,x,y),point_direction(300,300,oBoard.x,oBoard.y))*5
  direction = point_direction(xstart,ystart,300,300)-xdist+90+oBoard.rot
  x=xprevious
  y=yprevious
  hspeed*= 1.005
  vspeed*= 1.005
  bcs = 0
  
  if global.EMenu==2
    {
    buffer_seek (parent.GR.buffer_send, buffer_seek_start, 0);
    buffer_write(parent.GR.buffer_send, buffer_s16, 25)
    buffer_write(parent.GR.buffer_send, buffer_s16, x)
    buffer_write(parent.GR.buffer_send, buffer_s16, y)
    buffer_write(parent.GR.buffer_send, buffer_s16, direction)
    for (j=1; j&lt;global.PlsCount; j++)
      network_send_packet( global.PlsArrSock[j], parent.GR.buffer_send, buffer_tell(parent.GR.buffer_send) ) 
    }
  else
    {
    buffer_seek (parent.GR.buffer_send, buffer_seek_start, 0);
    buffer_write(parent.GR.buffer_send, buffer_s16, 31)
    buffer_write(parent.GR.buffer_send, buffer_s16, direction); //client problem
    network_send_packet( parent.GR.main, parent.GR.buffer_send, buffer_tell(parent.GR.buffer_send) );
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 300
y = 300
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dist=point_distance(300,300,x,y)
currrot=degtorad(point_direction(300,300,x,y)+GameRuler.rot)
drawx=300-dist*cos(currrot)
drawy=300+dist*sin(currrot)
draw_sprite_ext(Ball,0,drawx,drawy,1,1,0,cl,1)
if delay &gt; 0
  draw_sprite_ext(ArrowCentred,0,drawx,drawy,0.5,0.5,GameRuler.rot+rparam-rot,c_white,1)
  
//debug
//draw_sprite_ext(Ball,0,x,y,1.5,1.5,0,c_red,0.5)
//draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
