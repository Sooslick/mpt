<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_set_config(network_config_use_non_blocking_socket, 1);
client = network_create_socket(network_socket_tcp);
network_connect(client, global.ip, real(global.port));
buffer_send = buffer_create(64, buffer_grow, 1);

//buffer_seek(buffer_send, buffer_seek_start, 0);
//buffer_write(buffer_send, buffer_s16, 0)
//buffer_write(buffer_send, buffer_s16, 1000)
//network_send_packet( client, buffer_send, buffer_tell(buffer_send) );

timeout = 600
control = 300
connection = false
initialization = false
crot = 0
ctick = 0
MessageText = ''
MessageSend = false
ClientText = ''
ClientSend = false

bk = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeout--
control--
if connection
  {
  if timeout &lt;= 0
    {
    global.ErrID = 3
    action_another_room(StartRoom)
    }
  else if control&lt;0
    {
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 6)
    buffer_write(buffer_send, buffer_s16, global.vtcp)
    network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
    }
  }
else
  if timeout == 0
    {
    global.ErrID = 2
    action_another_room(StartRoom)
    }
  else
    {
    crot+= 5
    ctick+= 0.1
    }
    
if keyboard_check(vk_backspace)
  {
  bk++
  if (bk&gt;50)&amp;&amp;(bk mod 3 == 0)
    MessageText = string_copy(MessageText,1,string_length(MessageText)-1)
  }
else
  bk = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");

if type = network_type_non_blocking_connect
  {
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 0)
  buffer_write(buffer_send, buffer_s16, global.vtcp)
  network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
  }
else if type == network_type_data
  {                      
  msg_buff = ds_map_find_value(async_load, "buffer");
  SType = buffer_read(msg_buff, buffer_s16); 
  switch(SType)
    {
    case 1: 
      response = buffer_read (msg_buff, buffer_s16)
      if response div 10000 == 1
        {
        global.ErrID = 1
        network_destroy(client)
        action_another_room(StartRoom)
        }
      if response mod 10000 == global.vtcp
        {
        connection = true
        global.maxpl = buffer_read (msg_buff, buffer_u8)
        GameRulerLobby.PlsCount = buffer_read (msg_buff, buffer_u8) + 1
        for (i=1; i &lt; global.maxpl; i++)
          GameRulerLobby.PlsArrNick[i] = '&lt; wait &gt;'
        global.diff = buffer_read (msg_buff, buffer_u8)
        switch global.diff
          {
          case 0: GameRulerLobby.diff_str = 'Game difficulty: EZ'; break;
          case 1: GameRulerLobby.diff_str = 'Game difficulty: normal'; break;
          case 2: GameRulerLobby.diff_str = 'Game difficulty: hard'; break;
          case 3: GameRulerLobby.diff_str = 'Game difficulty: sweaty'; break;
          default: GameRulerLobby.diff_str = 'Game difficulty: WTF?!'; break;
          }
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 2)
        buffer_write(buffer_send, buffer_string, global.Nick)
        network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 41)
        buffer_write(buffer_send, buffer_s32, global.bbcl)
        network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
        }
      else
        {
        global.ErrID = 6
        network_destroy(client)
        action_another_room(StartRoom)
        }
      break;
    case 3:
      GameRulerLobby.PlsCount = buffer_read (msg_buff, buffer_u8)
      i = buffer_read (msg_buff, buffer_u8)
      if i&gt;=0 &amp;&amp; i&lt;global.maxpl
        GameRulerLobby.PlsArrNick[i] =  buffer_read(msg_buff, buffer_string);
      break;
    case 5:
      ClientText = buffer_read (msg_buff, buffer_string)
      ClientSend = true
      break;
    case 7:
      timeout = 600
      control = 300
      break;   
    case 8:
      network_destroy(client)
      global.ErrID = 5
      action_another_room(StartRoom) 
      break;  
    case 9:
      GameRulerLobby.PlsCount = buffer_read (msg_buff, buffer_u8)
      global.frag = buffer_read (msg_buff, buffer_u8)
      global.timer = buffer_read (msg_buff, buffer_u8)
      global.lv = buffer_read (msg_buff, buffer_u8)
      global.gmode = buffer_read (msg_buff, buffer_u8)
      GameRulerLobby.frag_str = 'goal limit: ' + string(global.frag)
      GameRulerLobby.time_str = 'time limit: ' + string(global.timer) + ' minutes'
      break;
    case 10: 
      response = buffer_read (msg_buff, buffer_s16)
      if response mod 10000 == global.vtcp
        {
        global.GR         = client
        global.PlsCount   = buffer_read (msg_buff, buffer_s8)
        global.wp1        = buffer_read (msg_buff, buffer_s8)
//        global.wp2        = buffer_read (msg_buff, buffer_s8)
        global.PlsArrNick = GameRulerLobby.PlsArrNick
        global.PlsArrCl   = GameRulerLobby.BbClArr
        action_another_room(GameRoom)
        }
      break;  
    case 40:
      i = buffer_read (msg_buff, buffer_s16)
      GameRulerLobby.BbClArr[i] = buffer_read (msg_buff, buffer_s32)
      break
    }  
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !connection
  {
  for (i=0; i&lt;= 5; i++)
    draw_sprite_ext(loading,0,400,300,1,1,crot+60*i,c_white,1)
  draw_set_halign(fa_center)
  draw_set_font(ChatFont)
  draw_set_alpha(1)
  draw_text(400,350,'connecting')
  }
else
  {
  draw_set_font(ChatFont)
  draw_set_alpha(0.50)
  draw_set_color(0)
  draw_rectangle(450,410,780,425,false)

  draw_set_color(c_white)
  draw_set_halign(fa_left)
  draw_set_alpha(1)
  if string_length(MessageText)&lt;=32
    draw_text(454,410,MessageText)
  else
    {
    tw = 320 / string_width(MessageText)
    draw_text_transformed(454,410,MessageText,tw,1,0)
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if string_length(MessageText) &gt; 0
  {
  MessageText = global.Nick + ': ' + MessageText
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 4)
  buffer_write(buffer_send, buffer_string, MessageText)
  network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
  MessageText = ''
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check(vk_enter)
  {
  if keyboard_check(vk_backspace)
      MessageText = string_copy(MessageText,1,string_length(MessageText)-1)
  else
    if (ord(keyboard_lastchar)&gt;=32)
      if string_length(MessageText)&lt;48
        if keyboard_lastchar=='#'
          MessageText+= '\#'
        else
          MessageText+= keyboard_lastchar
  keyboard_lastchar = ''
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
