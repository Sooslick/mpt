<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.GR  PlsArrNick  PlsArrSock  PlsArrIP  PlsCount 
randomize()
fpsc = instance_create(0,0,fpsCounter)
bg = instance_create(0,0,bgGameDrawer)
bg.parent = id

rot = 0
clockwise = true
spdtmp = 0
currtick = 0
rottick = 0
loadrot = 0

if global.EMenu==2
  GR = instance_create(0,0,GameRulerHost)
else
  GR = instance_create(0,0,GameRulerListener)
GR.parent = id 
active = false
winstate = false
checkwin = false
ClientElimTriggered = false

if global.PlsCount==1
  global.gmode = 0
 
for (i=0; i&lt;global.PlsCount; i++)
  {
  scTable[i] = 0
  offset[i] = i*(360/global.PlsCount)
  dx[i] = 0
  }

switch global.diff
  {
  case 0:
    {
    spd=1
    bsp=3.85
    mintick=300
    maxtick=600
    break
    }
  case 1:
    {
    spd=1.5
    bsp=4
    mintick=150
    maxtick=450
    break
    }
  case 2:
    {
    spd=2
    bsp=4.15
    mintick=60
    maxtick=300
    break
    }
  case 3:
    {
    spd=2.5
    bsp = 4.25
    mintick=30
    maxtick=240
    break
    }
  }  

for (i=0; i&lt;global.PlsCount; i++)
  {
  j = degtorad(offset[i])
  p[i] = instance_create(300+210*sin(j),300+210*cos(j),otherBoard) //other Player
  p[i].parent = id
  p[i].no = i           
  p[i].rot = offset[i]
  p[i].dx = 0
  p[i].cl = global.PlsArrCl[i]
  gt[i] = instance_create(300+240*sin(j),300+240*cos(j),GoalTrigger)
  gt[i].parent = id
  gt[i].no = i
  gt[i].rot = offset[i];             
  gt[i].image_angle = gt[i].rot
  gt[i].cl = global.PlsArrCl[i]
  gt[i].NameTag = global.PlsArrNick[i]
  }
tt = 0
bb = 0
fx = 0
GoalID = -1
onlyID = -1

backtick = -1

//wall pattern ID!! switch
if global.PlsCount==1
      {   
      wArr[0] = instance_create(102,102,Wall)
      wArr[0].image_angle = 45
      wArr[0].image_xscale = 2
      wArr[1] = instance_create(90,300,Wall)
      wArr[1].image_angle = 90
      wArr[1].image_xscale = 23
      wArr[2] = instance_create(102,498,Wall)
      wArr[2].image_angle = 135
      wArr[2].image_xscale = 2
      wArr[3] = instance_create(498,102,Wall)
      wArr[3].image_angle = 315
      wArr[3].image_xscale = 2
      wArr[4] = instance_create(510,300,Wall)
      wArr[4].image_angle = 270
      wArr[4].image_xscale = 23
      wArr[5] = instance_create(498,498,Wall)
      wArr[5].image_angle = 225
      wArr[5].image_xscale = 2
      wArr[6] = instance_create(300,90,Wall)
      wArr[6].image_angle = 180
      wArr[6].image_xscale = 23
      }
else
  {
  //wp = irandom_range(0,4) //debug-kostyl
  j = 0
  a = 360/(global.PlsCount*2)     //angle per iteration
  o = 200+global.PlsCount*8       //distance from cnter
  s = 52 /global.PlsCount - global.PlsCount/2         //scale
  switch (global.lv)
    {
    case 0:
      for (i=0; i&lt;global.PlsCount*2; i++)
        {
        if (i mod 2 == 1)
          {
          cr = degtorad(a*i)
          wArr[j] = instance_create(300+o*sin(cr),300+o*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i
          wArr[j].image_xscale = s
          j++
          }
        }       
      break;
    case 1:
      for (i=0; i&lt;global.PlsCount*2; i++)
        {
        if (i mod 2 == 1)
          {
          cr = degtorad(a*i)
          wArr[j] = instance_create(300+o*sin(cr),300+o*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i
          wArr[j].image_xscale = s
          j++
          wArr[j] = instance_create(300+(o-40)*sin(cr),300+(o-40)*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i
          wArr[j].image_xscale = s*0.6
          j++
          }
        }       
      break;
    case 2:
      for (i=0; i&lt;global.PlsCount*2; i++)
        {
        if (i mod 2 == 1)
          {
          cr = degtorad(a*i)
          wArr[j] = instance_create(300+o*sin(cr),300+o*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i
          wArr[j].image_xscale = s
          j++
          wArr[j] = instance_create(300+(o-32)*sin(cr),300+(o-32)*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i + 90
          wArr[j].image_xscale = 4
          j++
          }
        }       
      break;
    case 3:
      for (i=0; i&lt;global.PlsCount*2; i++)
        {
        if (i mod 2 == 1)
          {
          da = arctan(s*12.5 /o)
          cr = degtorad(a*i) - da/2 
          wArr[j] = instance_create(300+(o-5)*sin(cr),300+(o-5)*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i + 15
          wArr[j].image_xscale = s/2 + (global.PlsCount-2)*(2.25/global.PlsCount+(6-global.PlsCount)*0.25)
          j++
          cr = degtorad(a*i) + da/2 
          wArr[j] = instance_create(300+(o-5)*sin(cr),300+(o-5)*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i - 15
          wArr[j].image_xscale = s/2 + (global.PlsCount-2)*(2.25/global.PlsCount+(6-global.PlsCount)*0.25)
          j++
          }
        }
      break;
    case 4:
      for (i=0; i&lt;global.PlsCount*2; i++)
        {
        if (i mod 2 == 1)
          {
          da = arctan(s*10 /o)
          cr = degtorad(a*i)
          wArr[j] = instance_create(300+o*sin(cr),300+o*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i
          wArr[j].image_xscale = s
          j++
          cr = degtorad(a*i) + da
          co = sqrt(o*o + s*s*64) - o - (global.PlsCount-2)*2
          wArr[j] = instance_create(300+(o+co)*sin(cr),300+(o+co)*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i + 45
          wArr[j].image_xscale = 2
          j++
          cr = degtorad(a*i) - da
          wArr[j] = instance_create(300+(o+co)*sin(cr),300+(o+co)*cos(cr),Wall)
          wArr[j].parent = id
          wArr[j].image_angle = a*i - 45
          wArr[j].image_xscale = 2
          j++
          }
        }
      break;
    }
  }
wArr[j] = 0

ElimCount = 0
for (j=0; j&lt;global.PlsCount; j++)
  ewArr[j] = 0
     
//debug-kostyl 
  j = degtorad(offset[0])
  if global.EMenu==2
      {
      instance_destroy(p[0],false)
      p[0] = instance_create(300+210*sin(j),300+210*cos(j),oBoard) //other Player
      p[0].parent = id
      p[0].no = 0           
      p[0].rot = offset[0]
      p[0].dx = 0
      }
         
if global.gmode==0
  rules='Points are awarded for each hit you miss. The player with least number of points wins the game.'
else
  rules='Players who miss the ball drop out, and the last player receives points. The player with biggest number of points wins the game.'
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>loadrot++

if clockwise
  rot+= spd+spdtmp
else
  rot-= spd+spdtmp
if spdtmp&gt;0
  spdtmp-= 0.01 
else if spdtmp&lt;0
  spdtmp+= 0.01

if active
  { 
  currtick+=1
  if currtick=rottick
    {
    GR.EventRot = true
    switch (irandom_range(1,20))
      {
      case 1: case 2: spdtmp = 1.5; break;
      case 3: spdtmp = -spd; break;
      case 4: spdtmp = -spd;
      default:
        if clockwise
          clockwise=false
        else
          clockwise=true
      }
    spd+=0.01
    if spd&gt;3
      spd = 3  
    rottick=irandom_range(mintick,maxtick)
    currtick=0
    }
  }

if global.EMenu==2
  {
  if GoalID &lt;&gt; -1
    {
    if global.gmode == 0 //haha classics
      {
      scTable[GoalID]++ 
      buffer_seek (GR.buffer_send, buffer_seek_start, 0);
      buffer_write(GR.buffer_send, buffer_s16, 23)
      buffer_write(GR.buffer_send, buffer_s16, GoalID )
      buffer_write(GR.buffer_send, buffer_s16, scTable[GoalID])
      for (j=1; j&lt;global.PlsCount; j++)
        network_send_packet( global.PlsArrSock[j], GR.buffer_send, buffer_tell(GR.buffer_send) )  
      GoalID = -1
      }
    else //elim if global.gmode == 1
      {
      ElimCount ++
      ewArr[GoalID] = instance_create(p[GoalID].xstart,p[GoalID].ystart,Wall)
      ewArr[GoalID].parent = id
      ewArr[GoalID].image_xscale = 88 / global.PlsCount
      ewArr[GoalID].image_yscale = 2
      ewArr[GoalID].image_angle = p[GoalID].image_angle
      
      //elim event send
      buffer_seek (GR.buffer_send, buffer_seek_start, 0);
      buffer_write(GR.buffer_send, buffer_s16, 26)
      buffer_write(GR.buffer_send, buffer_s16, ElimCount )
      buffer_write(GR.buffer_send, buffer_s16, GoalID )
      for (i=1; i&lt;global.PlsCount; i++)
              network_send_packet( global.PlsArrSock[i], GR.buffer_send, buffer_tell(GR.buffer_send) ) 
         
      GoalID = -1
                           
      if global.PlsCount-1 == ElimCount
        {
        for (j=0; j&lt;global.PlsCount; j++)
          if ewArr[j]==0
            {
            scTable[j]++
            buffer_seek (GR.buffer_send, buffer_seek_start, 0);
            buffer_write(GR.buffer_send, buffer_s16, 23)
            buffer_write(GR.buffer_send, buffer_s16, j )
            buffer_write(GR.buffer_send, buffer_s16, scTable[j])
            for (i=1; i&lt;global.PlsCount; i++)
              network_send_packet( global.PlsArrSock[i], GR.buffer_send, buffer_tell(GR.buffer_send) ) 
            }
          else
            {
            instance_destroy(ewArr[j],false)
            ewArr[j] = 0
            }
        ElimCount = 0
        }
      }
    }
  }
else if ClientElimTriggered
  {
  ClientElimTriggered = false
  ewArr[CETGoalID] = instance_create(p[CETGoalID].xstart,p[CETGoalID].ystart,Wall)
  ewArr[CETGoalID].parent = id
  ewArr[CETGoalID].image_xscale = 80 / global.PlsCount
  ewArr[CETGoalID].image_yscale = 2
  ewArr[CETGoalID].image_angle = p[CETGoalID].image_angle
  if global.PlsCount-1 == ElimCount
        {
        for (j=0; j&lt;global.PlsCount; j++)
          if ewArr[j]&lt;&gt;0
            {
            instance_destroy(ewArr[j],false)
            ewArr[j] = 0
            }
        ElimCount = 0
        }
  }
  
if !winstate
  {
  for (j=0; j&lt;global.PlsCount; j++)
    if scTable[j]== global.frag
      {
      winstate = true
      checkwin = true
      }
  }
else if checkwin
  {
  if onlyID == -1
    {
    if global.gmode == 0
      {
      i = global.frag+1
      only1 = true
      onlyID = -1
      for (j=0; j&lt;global.PlsCount; j++)
        {
        if scTable[j]&lt;i
          {
          i = scTable[j]
          onlyID = j
          only1 = true
          }
        else if scTable[j] == i
          only1 = false
        }
      if only1
        {
        if fx==0
          {
          fx = instance_create(0,0,oBigTextFX)
          fx.parent = id
          if global.PlsCount &gt; 1
            fx.content = global.PlsArrNick[onlyID] + '#IS WINNER'
          else
            {
            fx.content = 'Endgame.'
            onlyID = 0
            }
          instance_destroy(bb,false)
          bb = 0
          rottick = -1
          backtick = 200
          }
        }
      else
        onlyID = -1
      }
    else
      {
      i = -1
      only1 = true
      onlyID = -1
      for (j=0; j&lt;global.PlsCount; j++)
        {
        if scTable[j]&gt;i
          {
          i = scTable[j]
          onlyID = j
          only1 = true
          }
        else if scTable[j] == i
          only1 = false
        }
      if only1
        {
        if fx==0
          {
          fx = instance_create(0,0,oBigTextFX)
          fx.parent = id
          if global.PlsCount &gt; 1
            fx.content = global.PlsArrNick[onlyID] + '#IS WINNER'
          else
            {
            fx.content = 'Endgame.'
            onlyID = 0
            }
          instance_destroy(bb,false)
          bb = 0
          rottick = -1
          backtick = 200
          }
        }
      else
        onlyID = -1
      }
    }
  checkwin = false
  }  
  
if backtick&gt;0
  {
  backtick--
  if backtick==0
    instance_create(400,500,ButtonEsc)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1)
draw_sprite_ext(ChatBox,0,600,0,1,800,0,c_white,1)
draw_set_font(Menu28)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_text(700,20,'STATS')

draw_set_font(ChatFont)
draw_set_halign(fa_left)

draw_text(625,100,'Goal limit: ' + string(global.frag))

for (i=0; i&lt;global.PlsCount; i++)
  {
//if GR.PlsArrReady[i]
    draw_set_color(c_white)
//  else
  //  draw_set_color(c_red)*///if plr not ready draw set clr red
  draw_text(666,150 + i*25,global.PlsArrNick[i])
  draw_text(625,150 + i*25,string(scTable[i]))
  draw_set_color(global.PlsArrCl[i])
  draw_rectangle(645,153 + i*25,655,163 + i*25,false)
  }
  
//debug
/*s = ''
for (i=0; i&lt;global.PlsCount; i++)
  s+= string(floor(p[i].x)) + ' ' + string(floor(p[i].y)) + '#'
if bb&lt;&gt;0
  s+= '#' + string(floor(bb.x)) + ' ' + string(floor(bb.y))
draw_text(623,399,s)*/
draw_sprite(salpha,0,0,0)

draw_set_color(c_white)
draw_text_ext(608,333,rules,14,180)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.EMenu==2
  {
  buffer_seek(GR.buffer_send, buffer_seek_start, 0);
  buffer_write(GR.buffer_send, buffer_s16, 8)
  for (i=1; i&lt;global.PlsCount; i++)
    network_send_packet( global.PlsArrSock[i], GR.buffer_send, buffer_tell(GR.buffer_send) );
  network_destroy(global.GR)
  }
else
  {
  network_destroy(global.GR)
  global.ErrID = 4
  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>StartRoom</room>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
