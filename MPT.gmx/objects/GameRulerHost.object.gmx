<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>main = global.GR        //server connection data //zachem, parent!
active = false          //status: 0 pre-wait; 1 init; 2 game; 3 wait;
wait = true
PlsArrReady[0] = true
PlsArrTO[0] = 0         //timeout
ReadyCount = 1

EventRot = false
EventEnd = false

buffer_send = buffer_create(64, buffer_grow, 1);
buffer_seek (buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s16, 10)
buffer_write(buffer_send, buffer_s16, global.vtcp)
buffer_write(buffer_send, buffer_s8, global.PlsCount)
buffer_write(buffer_send, buffer_s8, global.lv)
//buffer_write(buffer_send, buffer_s8, global.wp2)
for (i=1; i&lt;global.PlsCount; i++)
  {
  network_send_packet( global.PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  PlsArrReady[i] = false
  PlsArrTO[i] = 600
  }
  
ErrStr = ''
discid = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !active
  {
  if wait                   //если приконнектились не все
    {
    ReadyCount = 0
    for (i=0; i&lt;global.PlsCount; i++)
      if PlsArrReady[i]
        ReadyCount++
      else
        {
        PlsArrTO[i]--
        if PlsArrTO[i]==0
          ErrStr+= 'lost connection: ' + global.PlsArrNick[i] + '#'
        //Plr disconnected, bot placing
        }
    if ReadyCount == global.PlsCount                //тут всем пакеты пришли
      {
      wait = false      
      PlsArrReady[0] = false
      ReadyCount = 0
      for (i=1; i&lt;global.PlsCount; i++)
        {
        PlsArrReady[i] = false
        buffer_seek (buffer_send, buffer_seek_start, 0);    //проверить лисенера бы
        buffer_write(buffer_send, buffer_s16, 12)
        buffer_write(buffer_send, buffer_s16, i)            //хуета, отвечающая за угол поворота
        network_send_packet( global.PlsArrSock[i], buffer_send, buffer_tell(buffer_send) )
        }
      buffer_seek (buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 22)
      buffer_write(buffer_send, buffer_s8, ReadyCount); //хуета сообщающая, скок человек нажали ready
      //buffer_write(buffer_send, buffer_s8, 1);      //status 1: connect -&gt; wait
      for (i=1; i&lt;global.PlsCount; i++)
        network_send_packet( global.PlsArrSock[i], buffer_send, buffer_tell(buffer_send) )
      }
    }
  else
    {
    ReadyCount = 0
    for (i=0; i&lt;global.PlsCount; i++)
      if PlsArrReady[i]
        ReadyCount++
    if ReadyCount == global.PlsCount        //vse gotovy
      {
      active = true
      timer = instance_create(300,400,oPreTimer)
      timer.parent = parent
      parent.active = true
      buffer_seek (buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 14)        //я сказала стартуем!
      for (i=1; i&lt;global.PlsCount; i++)
        network_send_packet( global.PlsArrSock[i], buffer_send, buffer_tell(buffer_send) ) 
      }
    }
  }
else
  {
  if EventRot
    {
    EventRot = false
    buffer_seek (buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 20)
    buffer_write(buffer_send, buffer_f32, parent.spd) 
    buffer_write(buffer_send, buffer_f32, parent.spdtmp) 
    buffer_write(buffer_send, buffer_s8, parent.clockwise) 
    buffer_write(buffer_send, buffer_s16, parent.rottick)  
    for (i=1; i&lt;global.PlsCount; i++)
        network_send_packet( global.PlsArrSock[i], buffer_send, buffer_tell(buffer_send) ) 
    }
  }

//send coords
for (i=0; i&lt;global.PlsCount; i++)
  {
  buffer_seek (buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 21)
  buffer_write(buffer_send, buffer_s16, i)
  buffer_write(buffer_send, buffer_s16, parent.p[i].dx)
  for (j=1; j&lt;global.PlsCount; j++)
    network_send_packet( global.PlsArrSock[j], buffer_send, buffer_tell(buffer_send) ) 
  }
  
//send ball
if parent.bb &lt;&gt; 0
  {
  buffer_seek (buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 24)
  buffer_write(buffer_send, buffer_s16, parent.bb.delay)
  buffer_write(buffer_send, buffer_s16, parent.bb.rparam)
  buffer_write(buffer_send, buffer_f32, parent.bb.vspeed)
  buffer_write(buffer_send, buffer_f32, parent.bb.hspeed)
  buffer_write(buffer_send, buffer_s16, parent.bb.x)
  buffer_write(buffer_send, buffer_s16, parent.bb.y)
  for (j=1; j&lt;global.PlsCount; j++)
    network_send_packet( global.PlsArrSock[j], buffer_send, buffer_tell(buffer_send) )   
  }
 
if (parent.tt&lt;&gt;0)   
  if (parent.tt.tick mod 30 == 0)
    {
    buffer_seek (buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 28)
    buffer_write(buffer_send, buffer_s16, parent.tt.tick)
    for (j=1; j&lt;global.PlsCount; j++)
      network_send_packet( global.PlsArrSock[j], buffer_send, buffer_tell(buffer_send) )   
    }
else if !EventEnd
  {
  EventEnd = true
  buffer_seek (buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s16, 28)
  buffer_write(buffer_send, buffer_s16, 0)
  for (j=1; j&lt;global.PlsCount; j++)
      network_send_packet( global.PlsArrSock[j], buffer_send, buffer_tell(buffer_send) )
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!active)&amp;&amp;(!wait)
  {
  PlsArrReady[0] = true
  //send readyinfo???
  //
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");

if type == network_type_data
  {  
  msg_buff = ds_map_find_value(async_load, "buffer");
  SType = buffer_read(msg_buff, buffer_s16);
  switch(SType)
    {
    case 11:  
    
      for (i=0; i&lt;global.PlsCount; i++)
        if eid == global.PlsArrSock[i]
           {
           eid = i
           break
           }
                                                  //лисенер прогрузился
      PlsArrReady[eid] = true
      buffer_seek (buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 22)
      buffer_write(buffer_send, buffer_s8, ReadyCount); //хуета сообщающая, скок человек нажали ready
      //buffer_write(buffer_send, buffer_s8, 1);      //status 1: connect -&gt; wait
      for (i=1; i&lt;global.PlsCount; i++)
        network_send_packet( global.PlsArrSock[i], buffer_send, buffer_tell(buffer_send) )
      break;
    case 30:
      i = buffer_read (msg_buff, buffer_s16)
      parent.p[i].dx = buffer_read (msg_buff, buffer_s16)
      break;
    case 31:
      if parent.bb&lt;&gt;0
        {
        parent.bb.direction = buffer_read (msg_buff, buffer_s16)
        buffer_seek (buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s16, 25)
        buffer_write(buffer_send, buffer_s16, parent.bb.x)
        buffer_write(buffer_send, buffer_s16, parent.bb.y)
        buffer_write(buffer_send, buffer_s16, parent.bb.direction)
        for (j=1; j&lt;global.PlsCount; j++)
          network_send_packet( global.PlsArrSock[j], buffer_send, buffer_tell(buffer_send) )
        }
    }
  }
else if type == network_type_disconnect
  {
  trueDisc = false
  for (i=0; i&lt;global.PlsCount; i++)
        if sock == global.PlsArrSock[i]
           {
           eid = i
           trueDisc = true
           break
           }
  if trueDisc
    {
    buffer_seek (buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s16, 27)
    buffer_write(buffer_send, buffer_s16, eid)
    for (j=1; j&lt;global.PlsCount; j++)
        network_send_packet( global.PlsArrSock[j], buffer_send, buffer_tell(buffer_send) )
    
//  global.ErrID = 11
    if discid==0
      discid = instance_create(0,0,DiscMsg)
    else
      discid.op = 1
    discid.content = global.PlsArrNick[eid] + ' left'
    global.PlsArrNick[eid] = '&lt; BOT &gt;' 
    if !PlsArrReady[eid] 
      {
      PlsArrReady[eid] = true
      buffer_seek (buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s16, 22)
      buffer_write(buffer_send, buffer_s8, ReadyCount);
      }
  
  //TODO bot check
  
    j = degtorad(parent.offset[eid])
    i = parent.p[eid].dx
    instance_destroy(parent.p[eid],false)
    parent.p[eid] = instance_create(300+210*sin(j),300+210*cos(j),obotBoard) //other Player
    parent.p[eid].parent = parent
    parent.p[eid].no = eid           
    parent.p[eid].rot = parent.offset[eid]
    parent.p[eid].dx = i
    parent.p[eid].cl = global.PlsArrCl[eid]
    parent.p[eid].botsp = 7 / global.PlsCount + global.PlsCount / 10
    parent.gt[eid].NameTag = '&lt; BOT &gt;'
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !active
  {
  draw_set_alpha(1)
  draw_set_halign(fa_center)
  draw_set_color(c_maroon)
  draw_set_font(ChatFont)
  if wait
    {
      for (i=0; i&lt;= 5; i++)
        draw_sprite_ext(loading,0,300,300,1,1,5*parent.loadrot+60*i,c_white,1)
      draw_text(300,350,'Waiting for players')
      draw_text(300,400,string(ReadyCount) + ' / ' + string(global.PlsCount) + ' ready')
    }
  else
    {
      draw_text(300,350,'Waiting for players')
      if !PlsArrReady[0]
        draw_text(300,400,'Press mouse to get ready')
      else
        draw_text(300,400,string(ReadyCount) + ' / ' + string(global.PlsCount) + ' ready')
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
